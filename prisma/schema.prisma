generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MonthlySummary {
  id          String    @id @default(cuid())
  user_id     String
  month       DateTime  @db.Date
  total_spent Decimal   @db.Decimal(10, 2)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  budget      Decimal   @default(0.00) @db.Decimal(10, 2)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, month])
}

model Transaction {
  id            String    @id @default(cuid())
  user_id       String
  amount        Decimal   @db.Decimal(10, 2)
  category      String?   @db.VarChar(255)
  purchase_date DateTime  @db.Date
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  name          String    @db.VarChar(255)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, purchase_date])
  @@index([user_id, category])
  @@index([user_id, name])
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  default_budget        Decimal           @default(0.00) @db.Decimal(10, 2)
  monthly_summary       MonthlySummary[]
  transactions          Transaction[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Database functions and triggers for automatic monthly summary updates
// These will be created when you run prisma db push or generate a new migration
//
// CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
//
// CREATE OR REPLACE FUNCTION update_monthly_summary()
// RETURNS TRIGGER AS $$
// BEGIN
//     IF TG_OP = 'INSERT' THEN
//         INSERT INTO "MonthlySummary" (id, user_id, month, total_spent, budget)
//         VALUES (
//             uuid_generate_v4(),
//             NEW.user_id, 
//             DATE_TRUNC('month', NEW.purchase_date), 
//             NEW.amount, 
//             (SELECT default_budget FROM "User" WHERE id = NEW.user_id)
//         )
//         ON CONFLICT (user_id, month) DO UPDATE 
//         SET total_spent = "MonthlySummary".total_spent + NEW.amount;
//     END IF;
//     
//     IF TG_OP = 'UPDATE' THEN
//         UPDATE "MonthlySummary"
//         SET 
//             total_spent = total_spent + NEW.amount - OLD.amount
//         WHERE user_id = NEW.user_id
//           AND DATE_TRUNC('month', month) = DATE_TRUNC('month', NEW.purchase_date);
//     END IF;
//
//     IF TG_OP = 'DELETE' THEN
//         UPDATE "MonthlySummary"
//         SET 
//             total_spent = total_spent - OLD.amount
//         WHERE user_id = OLD.user_id
//           AND DATE_TRUNC('month', month) = DATE_TRUNC('month', OLD.purchase_date);
//     END IF;
//
//     RETURN NULL;
// END;
// $$ LANGUAGE plpgsql;
//
// CREATE OR REPLACE TRIGGER trigger_update_monthly_summary
// AFTER INSERT OR UPDATE OR DELETE ON "Transaction"
// FOR EACH ROW
// EXECUTE FUNCTION update_monthly_summary();